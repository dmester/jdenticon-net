#region License
// Jdenticon-net
// https://github.com/dmester/jdenticon-net
// Copyright © Daniel Mester Pirttijärvi 2018
//
// Permission is hereby granted, free of charge, to any person obtaining 
// a copy of this software and associated documentation files (the 
// "Software"), to deal in the Software without restriction, including 
// without limitation the rights to use, copy, modify, merge, publish, 
// distribute, sublicense, and/or sell copies of the Software, and to 
// permit persons to whom the Software is furnished to do so, subject to 
// the following conditions:
// 
// The above copyright notice and this permission notice shall be 
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#endregion

using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;

#nullable enable

namespace Jdenticon.AspNetCore
{
    /// <summary>
    /// Extends <see cref="IApplicationBuilder"/> with methods for enabling 
    /// Jdenticon middleware, which will serve identicons to clients.
    /// </summary>
    /// <example>
    /// <para>
    /// <see cref="UseJdenticon(IApplicationBuilder)"/> should be called from the <c>Configure</c> method in your <c>Setup</c>
    /// class. Put the call right above <see cref="StaticFileExtensions.UseStaticFiles(IApplicationBuilder)"/>.
    /// </para>
    /// <code language="cs" title="Startup.cs">
    /// public class Startup
    /// {
    ///     public Startup(IConfiguration configuration)
    ///     {
    ///         Configuration = configuration;
    ///     }
    /// 
    ///     public IConfiguration Configuration { get; }
    /// 
    ///     // This method gets called by the runtime. Use this method to add services to the container.
    ///     public void ConfigureServices(IServiceCollection services)
    ///     {
    ///         services.AddMvc();
    ///     }
    /// 
    ///     // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
    ///     public void Configure(IApplicationBuilder app, IHostingEnvironment env)
    ///     {
    ///         app.UseJdenticon(); /*highlight*/
    ///         app.UseStaticFiles();
    ///         app.UseMvc();
    ///     }
    /// }
    /// </code>
    /// </example>
    public static class IdenticonBuilderExtensions
    {
        /// <summary>
        /// Enables serving identicons generated by Jdenticon for usage from the
        /// <see cref="IdenticonTagHelper"/> or by 
        /// <see cref="HtmlHelperExtensions"/> and <see cref="UrlHelperExtensions"/>.
        /// </summary>
        /// <param name="builder">Application builder.</param>
        /// <example>
        /// <para>
        /// <see cref="UseJdenticon(IApplicationBuilder)"/> should be called from the <c>Configure</c> method in your <c>Setup</c>
        /// class. Put the call right above <see cref="StaticFileExtensions.UseStaticFiles(IApplicationBuilder)"/>.
        /// </para>
        /// <code language="cs" title="Startup.cs">
        /// public class Startup
        /// {
        ///     public Startup(IConfiguration configuration)
        ///     {
        ///         Configuration = configuration;
        ///     }
        /// 
        ///     public IConfiguration Configuration { get; }
        /// 
        ///     // This method gets called by the runtime. Use this method to add services to the container.
        ///     public void ConfigureServices(IServiceCollection services)
        ///     {
        ///         services.AddMvc();
        ///     }
        /// 
        ///     // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        ///     public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        ///     {
        ///         app.UseJdenticon(); /*highlight*/
        ///         app.UseStaticFiles();
        ///         app.UseMvc();
        ///     }
        /// }
        /// </code>
        /// </example>
        /// <exception cref="ArgumentNullException"><paramref name="builder"/> was <c>null</c>.</exception>
        public static void UseJdenticon(this IApplicationBuilder builder)
        {
            if (builder == null) throw new ArgumentNullException(nameof(builder));

            builder.Map(IdenticonUrl.PathPrefix, innerApp =>
            {
                innerApp.UseMiddleware<IdenticonMiddleware>();
            });
        }

        /// <summary>
        /// Enables serving identicons generated by Jdenticon for usage from the
        /// <see cref="IdenticonTagHelper"/> or by 
        /// <see cref="HtmlHelperExtensions"/> and <see cref="UrlHelperExtensions"/>.
        /// </summary>
        /// <param name="builder">Application builder.</param>
        /// <param name="configureDefaultStyle">Callback used to configure the default identicon style.</param>
        /// <example>
        /// <para>
        /// <see cref="UseJdenticon(IApplicationBuilder)"/> should be called from the <c>Configure</c> method in your <c>Setup</c>
        /// class. Put the call right above <see cref="StaticFileExtensions.UseStaticFiles(IApplicationBuilder)"/>.
        /// </para>
        /// <code language="cs" title="Startup.cs">
        /// public class Startup
        /// {
        ///     public Startup(IConfiguration configuration)
        ///     {
        ///         Configuration = configuration;
        ///     }
        /// 
        ///     public IConfiguration Configuration { get; }
        /// 
        ///     // This method gets called by the runtime. Use this method to add services to the container.
        ///     public void ConfigureServices(IServiceCollection services)
        ///     {
        ///         services.AddMvc();
        ///     }
        /// 
        ///     // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        ///     public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        ///     {
        ///         app.UseJdenticon(style =>               /*highlight*/
        ///         {                                       /*highlight*/
        ///             style.BackColor = Color.CadetBlue;  /*highlight*/
        ///             style.Hues = new HueCollection { { 127, HueUnit.Degrees } }; /*highlight*/
        ///         });                                     /*highlight*/
        ///         app.UseStaticFiles();
        ///         app.UseMvc();
        ///     }
        /// }
        /// </code>
        /// </example>
        /// <exception cref="ArgumentNullException"><paramref name="builder"/> or <paramref name="configureDefaultStyle"/> was <c>null</c>.</exception>
        public static void UseJdenticon(this IApplicationBuilder builder, Action<IdenticonStyle> configureDefaultStyle)
        {
            if (builder == null) throw new ArgumentNullException(nameof(builder));
            if (configureDefaultStyle == null) throw new ArgumentNullException(nameof(configureDefaultStyle));

            UseJdenticon(builder);
            configureDefaultStyle(Identicon.DefaultStyle);
        }
    }
}
